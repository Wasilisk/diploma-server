generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email             String           @unique
  phone             String           @unique
  password          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  id                Int              @id @default(autoincrement())
  confirmationToken String?          @unique
  profile           Profile?
  supportMessages   SupportMessage[]
  orders            Order[]
  role              UserRole         @default(USER)
}

enum UserRole {
  ADMIN
  MODERATOR
  GUIDE
  USER
}

model Profile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  firstName      String
  lastName       String
  profilePicture String?
  user           User    @relation(fields: [userId], references: [id])
}

model SupportMessage {
  id        Int                  @id @default(autoincrement())
  userId    Int
  subject   String
  content   String
  user      User                 @relation(fields: [userId], references: [id])
  status    SupportMessageStatus @default(ACTIVE)
  createdAt DateTime             @default(now())
}

enum SupportMessageStatus {
  ACTIVE
  RESOLVED
}

model Direction {
  id    Int    @id @default(autoincrement())
  name  String
  image String
  tours Tour[]
}

model Tour {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  directionId Int
  direction   Direction @relation(fields: [directionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gallery     String[]
  content     String

  tourInfo    TourInfo?
  ticketTypes TicketType[]
  orders      Order[]

  schedule TourSchedule?
  groups   TourGroup[]
}

model TourInfo {
  id           Int    @id @default(autoincrement())
  meetingPlace String
  endingPlace  String
  duration     String
  groupSize    Int
  groupType    String

  tourId Int  @unique
  tour   Tour @relation(fields: [tourId], references: [id])
}

model TicketType {
  id    Int    @id @default(autoincrement())
  name  String
  price Int

  tourId Int
  tour   Tour @relation(fields: [tourId], references: [id])

  orders Order[]
}

model Order {
  id     Int         @id @default(autoincrement())
  count  Int
  status OrderStatus @default(RESERVED)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  tourId Int
  tour   Tour @relation(fields: [tourId], references: [id])

  ticketTypeId Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  tourGroup   TourGroup @relation(fields: [tourGroupId], references: [id])
  tourGroupId Int
}

enum OrderStatus {
  RESERVED
  ACTIVE
  CANCELED
  COMPLETED
}

model TourSchedule {
  id        Int        @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  daysOff   DateTime[]

  monday    String[]
  tuesday   String[]
  wednesday String[]
  thursday  String[]
  friday    String[]
  saturday  String[]
  sunday    String[]

  tourId Int  @unique
  tour   Tour @relation(fields: [tourId], references: [id])
}

model TourGroup {
  id   Int      @id @default(autoincrement())
  time String
  date DateTime

  orders Order[]

  tourId Int
  tour   Tour @relation(fields: [tourId], references: [id])
}
